{% extends 'katzen/base.html.twig' %}

{% form_theme recipe_form 'katzen/form/quantity_unit_theme.html.twig' %}

{% block main_content %}
<div class="container py-5">
  <h2 class="mb-3">Build a New Recipe</h2>
  <p class="text-muted"></p>

  <div class="card shadow-sm p-4">
    {{ form_start(recipe_form) }}

    <div class="mb-4">
      {{ form_row(recipe_form.title) }}
    </div>

    <div class="mb-4">
      <h5>Description</h5>
      <p class="text-muted">Just a sentence or two. We'll help you refine it later.</p>
      {{ form_row(recipe_form.summary) }}
    </div>    

    <div class="mb-4">
      <h5>Serving</h5>
      <div class="row">
        <div class="col-md-4">
          {{ form_row(recipe_form.serving_min_qty) }}
        </div>
        <div class="col-md-4">
          {{ form_row(recipe_form.serving_max_qty) }}
        </div>
        <div class="col-md-4">
          {{ form_row(recipe_form.serving_unit) }}
        </div>
      </div>
      <div class="row">
        <div class="col-md-4">
          {{ form_row(recipe_form.prep_time) }}
        </div>
        <div class="col-md-4">
          {{ form_row(recipe_form.cook_time) }}
        </div>
        <div class="col-md-4">
          {{ form_row(recipe_form.wait_time) }}
        </div>
      </div>      
    </div>

    <div class="mb-4">
      <h5>Add Ingredients</h5>
      <label for="item-selector" class="form-label">Search for an ingredient</label>
      <input type="text" id="item-selector" class="form-control" placeholder="Start typing...">
      <ul id="item-results" class="list-group mt-2"></ul>

      {% set proto = recipe_form.recipeIngredients.vars.prototype %}
      {% set ingredientPrototype %}
      <div class="ri-row d-flex align-items-center gap-2" data-collection-item>
        <span class="badge text-bg-light" data-role="chosen-item-name"></span>
        {{ form_row(proto.quantityUnit) }}
        {{ form_widget(proto.supply, { attr: { class: 'd-none' } }) }}
        <input type="hidden" name="{{ proto.vars.full_name }}[unit_hint]" value="">
        
        <button type="button" class="btn btn-outline-danger btn-sm" data-collection-remove>&times;</button>
      </div>
      {% endset %}
      
      <div id="ingredients-list"
           class="mt-3"
           data-index="{{ recipe_form.recipeIngredients|length }}"
           data-prototype="{{ ingredientPrototype|e('html_attr') }}">
        {% for entry in recipe_form.recipeIngredients %}
        <div class="ri-row d-flex align-items-center gap-2" data-collection-item>
          <span class="badge text-bg-light" data-role="chosen-item-name">
            {{ entry.supply.vars.data ? entry.supply.vars.data.name : 'Ingredient' }}
          </span>
          
          {{ form_widget(entry.quantityUnit, {'attr': {'class': 'd-none'}}) }}
          {{ form_widget(entry.supply,   {'attr': {'class': 'd-none'}}) }}
          <input type="hidden" name="{{ entry.vars.full_name }}[unit_hint]" value="">
          
          <button type="button" class="btn btn-outline-danger btn-sm" data-collection-remove>&times;</button>
        </div>
        {% endfor %}
      </div>
    </div>

    <div class="text-end mt-4">
      {{ form_row(recipe_form.save) }}
    </div>

    {{ form_end(recipe_form) }}
  </div>

  <div class="mt-4">
    <a href="{{ path('app_recipe') }}" class="btn btn-outline-secondary">← Back to Dashboard</a>
  </div>
</div>
<script>
  document.addEventListener('DOMContentLoaded', () => {
  const input   = document.getElementById('item-selector');
  const results = document.getElementById('item-results');
  const holder  = document.getElementById('ingredients-list');

  let index      = parseInt(holder.dataset.index || '0', 10);
  const prototype = holder.dataset.prototype;    // ← correct source

  // --- search & pick ---
  input.addEventListener('input', debounce(async () => {
    const q = input.value.trim();
    if (q.length < 2) { results.innerHTML=''; return; }

    try {
      const resp = await fetch(`{{ path('item_search') }}?q=${encodeURIComponent(q)}`);
      const items = await resp.json();

      results.innerHTML = '';
      if (!Array.isArray(items) || items.length === 0) {
        results.innerHTML = '<li class="list-group-item text-muted">No matches</li>';
        return;
      }

      for (const it of items) {
        const li = document.createElement('li');
        li.className = 'list-group-item list-group-item-action';
        li.textContent = it.name;
        li.tabIndex = 0;
        li.addEventListener('click', () => onPick(it));
        li.addEventListener('keydown', e => { if (e.key === 'Enter') onPick(it); });
        results.appendChild(li);
      }
    } catch (e) {
      console.error(e);
      results.innerHTML = '<li class="list-group-item text-danger">Search failed</li>';
    }
  }, 180));
  
  function onPick(item) {
    addIngredientRow(item);
    input.value = '';
    results.innerHTML = '';
  }
  
  function addIngredientRow(item) {
    const html = prototype.replace(/__name__/g, String(index));
    const tmp = document.createElement('div');
    tmp.innerHTML = html.trim();
    
    const row = tmp.firstElementChild;
    if (!row) { console.error('Prototype did not render a row element'); return; }
    
    const itemInput = row.querySelector('[name$="[supply]"]');
    if (!itemInput) { console.error('Prototype missing [supply] field'); return; }
    
    if (itemInput.tagName === 'SELECT') {
      let opt = Array.from(itemInput.options).find(o => o.value === String(item.id));
      if (!opt) {
        opt = document.createElement('option');
        opt.value = String(item.id);
        opt.textContent = item.name;
        itemInput.appendChild(opt);
      }
      itemInput.value = String(item.id);
    } else {
      itemInput.value = String(item.id);
    }
    const nameBadge = row.querySelector('[data-role="chosen-item-name"]');
    if (nameBadge) nameBadge.textContent = item.name;
    
    holder.appendChild(row);
    index += 1;
    holder.dataset.index = String(index);
  }
  
  holder.addEventListener('click', (e) => {
    const btn = e.target.closest('[data-collection-remove]');
    if (!btn) return;
    e.preventDefault();
    const itemRow = btn.closest('[data-collection-item]') || btn.closest('.form-group, .mb-3, .row');
    if (itemRow) itemRow.remove();
  });
  
  function debounce(fn, wait) {
    let t; return (...args) => { clearTimeout(t); t = setTimeout(() => fn.apply(null, args), wait); };
  }

  function parseQty(str) {
    const s = str.trim().toLowerCase().replace(/\s+/g,' ');
    if (!s) return { qty: null, unit: null, free: '' };

    if (/(pinch|dash|to taste)/.test(s)) return { qty: 0, unit: 'qsp' /* your id/code */, free: s };

    const mfrac = s.match(/^(\d+)\s+(\d+)\/(\d+)\s*([a-zμ.%]+)?$/i);
    if (mfrac) {
      const val = parseInt(mfrac[1],10) + (parseInt(mfrac[2],10)/parseInt(mfrac[3],10));
      return { qty: val, unit: (mfrac[4]||'').trim() || null, free: '' };
    }

    const frac = s.match(/^(\d+)\/(\d+)\s*([a-zμ.%]+)?$/i);
    if (frac) {
      const val = parseInt(frac[1],10)/parseInt(frac[2],10);
      return { qty: val, unit: (frac[3]||'').trim() || null, free: '' };
    }

    const num = s.match(/^([+-]?\d+(?:\.\d+)?)\s*([a-zμ.%]+)?$/i);
    if (num) return { qty: parseFloat(num[1]), unit: (num[2]||'').trim() || null, free: '' };

    return { qty: null, unit: null, free: s };
  }

  holder.addEventListener('focusout', (e) => {
    if (!e.target.matches('input[name$="[qstr]"]')) return;
    const row = e.target.closest('.ri-row');
    const { qty, unit } = parseQty(e.target.value);
    if (qty != null) row.querySelector('input[name$="[quantity]"]').value = String(qty);
    const hint = row.querySelector('input[name$="[unit_hint]"]');
    if (unit && hint) hint.value = unit;
  });
});
</script>
{% endblock %}
