{% extends 'hyper_link/base.html.twig' %}

{% block content %}
<div class="scene" id="prologue9">
  <p class="dialogue hidden">You saw, didn't you? They got him.</p>
  <p class="dialogue hidden">We have to go after him.</p>
  <div class="choices hidden" id="question-choices">
    <a class="choice canonical" href="{{ path('hyperlink_jump', { nextNodeKey: 'prologue10' }) }}">Who are you?</a>
    <a class="choice" href="{{ path('hyperlink_jump', { nextNodeKey: 'prologue10b' }) }}">Who are "they"?</a>
    <a class="choice" href="{{ path('hyperlink_jump', { nextNodeKey: 'prologue10c' }) }}">How do we follow him?</a>
  </div>
</div>

<style>
@keyframes hyperlink-float {
  0%, 100% { transform: translateY(0px) scale(1); }
  50% { transform: translateY(-10px) scale(1.1); }
}

@keyframes hyperlink-materialize {
  0% { 
    opacity: 0; 
    transform: scale(0.1); 
    filter: blur(10px);
  }
  50% { 
    opacity: 0.5; 
    transform: scale(0.8); 
    filter: blur(5px);
  }
  100% { 
    opacity: 1; 
    transform: scale(1); 
    filter: blur(0px);
  }
}

.materializing {
  animation: hyperlink-materialize 2s ease-out;
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const canvas = document.getElementById('screen');
    const ctx = canvas.getContext('2d');
    
    if (!canvas) return;
    
    let hyperlinkX = canvas.width / 2;
    let hyperlinkY = canvas.height / 2;
    let materializing = true;
    let materializeProgress = 0;
    let floatOffset = 0;
    
    function drawStillScene() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        
        // Background cracks
        ctx.strokeStyle = 'rgba(255, 0, 102, 0.3)';
        ctx.lineWidth = 1;
        ctx.beginPath();
        ctx.moveTo(50, 100);
        ctx.lineTo(200, 250);
        ctx.moveTo(300, 50);
        ctx.lineTo(450, 180);
        ctx.moveTo(500, 300);
        ctx.lineTo(700, 150);
        ctx.moveTo(150, 350);
        ctx.lineTo(600, 80);
        ctx.stroke();
        
        // Flickering wrench
        if (Math.random() > 0.1) {
            const wrenchX = canvas.width / 2 + 30;
            const wrenchY = canvas.height / 2 + 55;
            ctx.fillStyle = Math.random() > 0.8 ? '#aaa' : '#888';
            ctx.fillRect(wrenchX, wrenchY, 8, 3);
            ctx.fillRect(wrenchX + 2, wrenchY - 3, 4, 9);
        }
    }
    
    function drawHyperlink() {
        if (materializing && materializeProgress < 1) {
            materializeProgress += 0.02;
            
            // Shimmering outline effect
            const alpha = materializeProgress * 0.5;
            const scale = 0.3 + (materializeProgress * 0.7);
            
            ctx.save();
            ctx.globalAlpha = alpha;
            ctx.translate(hyperlinkX, hyperlinkY);
            ctx.scale(scale, scale);
            
            // Outer glow
            const gradient = ctx.createRadialGradient(0, 0, 5, 0, 0, 20);
            gradient.addColorStop(0, 'rgba(135, 206, 235, 0.8)');
            gradient.addColorStop(0.5, 'rgba(65, 105, 225, 0.4)');
            gradient.addColorStop(1, 'rgba(135, 206, 235, 0)');
            
            ctx.fillStyle = gradient;
            ctx.beginPath();
            ctx.arc(0, 0, 20, 0, Math.PI * 2);
            ctx.fill();
            
            ctx.restore();
        } else {
            materializing = false;
            
            // Floating animation
            floatOffset += 0.05;
            const floatY = hyperlinkY + Math.sin(floatOffset) * 5;
            
            ctx.save();
            ctx.translate(hyperlinkX, floatY);
            
            // Main sprite
            const gradient = ctx.createRadialGradient(0, 0, 2, 0, 0, 12);
            gradient.addColorStop(0, '#87ceeb');
            gradient.addColorStop(0.7, '#4169e1');
            gradient.addColorStop(1, '#191970');
            
            ctx.fillStyle = gradient;
            ctx.beginPath();
            ctx.arc(0, 0, 12, 0, Math.PI * 2);
            ctx.fill();
            
            // Inner sparkle
            ctx.fillStyle = '#ffffff';
            ctx.beginPath();
            ctx.arc(-3, -3, 2, 0, Math.PI * 2);
            ctx.fill();
            
            // Link chain effect (simple)
            ctx.strokeStyle = '#87ceeb';
            ctx.lineWidth = 2;
            ctx.beginPath();
            ctx.arc(0, 0, 8, 0, Math.PI);
            ctx.arc(0, 0, 6, Math.PI, 0);
            ctx.stroke();
            
            ctx.restore();
        }
    }
    
    function animate() {
        drawStillScene();
        drawHyperlink();
        requestAnimationFrame(animate);
    }
    
    animate();
    
    // Dialogue sequence
    setTimeout(() => {
        document.querySelectorAll('.dialogue')[0].classList.remove('hidden');
    }, 3000);
    
    setTimeout(() => {
        document.querySelectorAll('.dialogue')[1].classList.remove('hidden');
    }, 5000);
    
    setTimeout(() => {
        document.getElementById('question-choices').classList.remove('hidden');
    }, 7000);
});
</script>
{% endblock %}
