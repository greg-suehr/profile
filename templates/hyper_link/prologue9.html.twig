{% extends 'hyper_link/base.html.twig' %}

{% block content %}
<div class="scene" id="prologue9">
  <p class="dialogue hidden">You saw, didn't you? They got him.</p>
  <p class="dialogue hidden">We have to go after him.</p>
  <div class="choices hidden" id="question-choices">
    <a class="choice canonical" href="{{ path('hyperlink_jump', { nextNodeKey: 'prologue10' }) }}">Who are you?</a>
    <a class="choice" href="{{ path('hyperlink_jump', { nextNodeKey: 'prologue10c' }) }}">Who are "they"?</a>
    <a class="choice" href="{{ path('hyperlink_jump', { nextNodeKey: 'prologue11' }) }}">How do we follow him?</a>
  </div>
</div>

<style>
@keyframes hyperlink-float {
  0%, 100% { transform: translateY(0px) scale(1); }
  50% { transform: translateY(-10px) scale(1.1); }
}

@keyframes hyperlink-materialize {
  0% { 
    opacity: 0; 
    transform: scale(0.1); 
    filter: blur(10px);
  }
  50% { 
    opacity: 0.5; 
    transform: scale(0.8); 
    filter: blur(5px);
  }
  100% { 
    opacity: 1; 
    transform: scale(1); 
    filter: blur(0px);
  }
}

.materializing {
  animation: hyperlink-materialize 2s ease-out;
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const canvas = document.getElementById('screen');
    const ctx = canvas.getContext('2d');

    if (!canvas) return;

    const hyperlinkSprite = new Image();
    hyperlinkSprite.src = '{{ asset("assets/hyper_link/spritesheet_link.png") }}';

    const FRAME_WIDTH = 64;
    const FRAME_HEIGHT = 64;
    const MATERIALIZE_FRAMES = [0, 1, 2, 1, 0];
    const MATERIALIZE_ROW = 6;  
    const FLOAT_FRAMES = [0, 0, 0, 0];
    const FLOAT_ROW = 6;

    let hyperlinkX = canvas.width / 2 - FRAME_WIDTH / 2;
    let hyperlinkY = canvas.height / 2 - FRAME_HEIGHT / 2;
    let materializing = true;
    let materializeIndex = 0;
    let floatIndex = 0;

    let materializeProgress = 0;
    let floatOffset = 0;

    const materializeFrameDuration = 200;
    const floatFrameDuration = 300;
    let lastMaterializeTime = 0;
    let lastFloatTime = 0;

    hyperlinkSprite.onload = () => {
        requestAnimationFrame(animate);
    };

    function drawStillScene() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);

        // Background cracks
        ctx.strokeStyle = 'rgba(255, 0, 102, 0.3)';
        ctx.lineWidth = 1;
        ctx.beginPath();
        ctx.moveTo(50, 100);
        ctx.lineTo(200, 250);
        ctx.moveTo(300, 50);
        ctx.lineTo(450, 180);
        ctx.moveTo(500, 300);
        ctx.lineTo(700, 150);
        ctx.moveTo(150, 350);
        ctx.lineTo(600, 80);
        ctx.stroke();

        // Flickering wrench
        if (Math.random() > 0.1) {
            const wrenchX = canvas.width / 2 + 30;
            const wrenchY = canvas.height / 2 + 55;
            ctx.fillStyle = Math.random() > 0.8 ? '#aaa' : '#888';
            ctx.fillRect(wrenchX, wrenchY, 8, 3);
            ctx.fillRect(wrenchX + 2, wrenchY - 3, 4, 9);
        }
    }

    function drawHyperlink(timestamp) {
        if (materializing) {
            if (!lastMaterializeTime) lastMaterializeTime = timestamp;

            if (timestamp - lastMaterializeTime > materializeFrameDuration) {
                materializeIndex++;
                lastMaterializeTime = timestamp;
            }

            materializeProgress = materializeIndex / MATERIALIZE_FRAMES.length;
            
            const scale = 0.3 + materializeProgress * 0.7;
            const opacity = materializeProgress;
            const blur = 10 * (1 - materializeProgress);

            const col = MATERIALIZE_FRAMES[Math.min(materializeIndex, MATERIALIZE_FRAMES.length - 1)];

            ctx.save();
            ctx.globalAlpha = opacity;
            ctx.filter = `blur(${blur}px)`;
            ctx.translate(hyperlinkX + FRAME_WIDTH/2, hyperlinkY + FRAME_HEIGHT/2);
            ctx.scale(scale, scale);
            ctx.translate(-FRAME_WIDTH/2, -FRAME_HEIGHT/2);

            ctx.drawImage(
                hyperlinkSprite,
                col * FRAME_WIDTH, MATERIALIZE_ROW * FRAME_HEIGHT,
                FRAME_WIDTH, FRAME_HEIGHT,
                0, 0,
                FRAME_WIDTH, FRAME_HEIGHT
            );

            ctx.restore();

            if (materializeIndex >= MATERIALIZE_FRAMES.length) {
                materializing = false;
                materializeIndex = 0;
            }

        } else {
            if (!lastFloatTime) lastFloatTime = timestamp;

            if (timestamp - lastFloatTime > floatFrameDuration) {
                floatIndex = (floatIndex + 1) % FLOAT_FRAMES.length;
                lastFloatTime = timestamp;
            }

            floatOffset += 0.05;
            const floatY = hyperlinkY + Math.sin(floatOffset) * 5;

            const col = FLOAT_FRAMES[floatIndex];

            ctx.save();
            ctx.translate(hyperlinkX, floatY);
            ctx.drawImage(
                hyperlinkSprite,
                col * FRAME_WIDTH, FLOAT_ROW * FRAME_HEIGHT,
                FRAME_WIDTH, FRAME_HEIGHT,
                0, 0,
                FRAME_WIDTH, FRAME_HEIGHT
            );
            ctx.restore();
        }
    }

    function animate(timestamp) {
        drawStillScene();
        drawHyperlink(timestamp);
        requestAnimationFrame(animate);
    }

    animate();

    // Dialogue triggers
    setTimeout(() => {
        document.querySelectorAll('.dialogue')[0].classList.remove('hidden');
    }, 3000);

    setTimeout(() => {
        document.querySelectorAll('.dialogue')[1].classList.remove('hidden');
    }, 5000);

    setTimeout(() => {
        document.getElementById('question-choices').classList.remove('hidden');
    }, 7000);
});
</script>
{% endblock %}
