{% extends 'hyper_link/base.html.twig' %}

{% block content %}
<div class="scene" id="prologue7">
  <div class="dialogue">
    <p class="character-dialogue">G: Well, I'm happy to have you here regardless!</p>
    <p class="character-dialogue hidden glitch-text">G: !</p>
    <p class="character-dialogue hidden">G: Oh no. No, no, no.</p>
    <p class="character-dialogue hidden">G: I didn't think they could...</p>
  </div>
  <div class="choices hidden" id="next-choices">
    <a class="choice canonical" href="{{ path('hyperlink_jump', { nextNodeKey: 'prologue8' }) }}">Continue...</a>
  </div>
</div>

<style>
.glitch-canvas {
  position: relative;
  overflow: hidden;
}

.glitch-overlay {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
  background: linear-gradient(45deg, transparent 30%, rgba(255,0,0,0.1) 35%, transparent 40%);
  animation: glitch-scan 0.1s infinite;
}

.rift {
  position: absolute;
  background: linear-gradient(45deg, #ff0066, #0066ff);
  opacity: 0.8;
  animation: rift-pulse 1s infinite;
}

.glitch-text {
  animation: text-glitch 0.2s infinite;
}

@keyframes glitch-scan {
  0% { transform: translateX(-100%); }
  100% { transform: translateX(100%); }
}

@keyframes rift-pulse {
  0%, 100% { opacity: 0.3; transform: scale(1); }
  50% { opacity: 0.8; transform: scale(1.05); }
}

@keyframes text-glitch {
  0%, 100% { transform: translateX(0); }
  25% { transform: translateX(-2px); }
  75% { transform: translateX(2px); }
}

@keyframes canvas-shake {
  0%, 100% { transform: translate(0); }
  10% { transform: translate(-2px, 1px); }
  20% { transform: translate(2px, -1px); }
  30% { transform: translate(-1px, 2px); }
  40% { transform: translate(1px, -2px); }
  50% { transform: translate(-2px, 1px); }
  60% { transform: translate(2px, 1px); }
  70% { transform: translate(-1px, -1px); }
  80% { transform: translate(1px, 2px); }
  90% { transform: translate(-2px, -1px); }
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const canvas = document.getElementById('screen');
    const ctx = canvas.getContext('2d');
    
    if (!canvas) return;
    
    const gregSprite = new Image();
    gregSprite.src = '{{ asset("assets/hyper_link/spritesheet_greg.png") }}';
    
    const FRAME_WIDTH = 64;
    const FRAME_HEIGHT = 64;
    const POSITION_ROW = 2;
    
    let posX = canvas.width / 2 - FRAME_WIDTH / 2;
    let posY = canvas.height / 2 - FRAME_HEIGHT / 2;
    
    let glitchIntensity = 0;
    let rifts = [];
    let wrenchDropped = false;
    let gregGone = false;

    let audioContext, oscillator, gainNode;
    
    function startHum() {
        try {
            audioContext = new (window.AudioContext || window.webkitAudioContext)();
            oscillator = audioContext.createOscillator();
            gainNode = audioContext.createGain();
            
            oscillator.connect(gainNode);
            gainNode.connect(audioContext.destination);
            
            oscillator.frequency.setValueAtTime(60, audioContext.currentTime);
            gainNode.gain.setValueAtTime(0, audioContext.currentTime);
            gainNode.gain.linearRampToValueAtTime(0.1, audioContext.currentTime + 2);
            
            oscillator.start();
        } catch (e) {
            console.log('Audio not supported');
        }
    }
    
    function stopHum() {
        if (gainNode && audioContext) {
            gainNode.gain.linearRampToValueAtTime(0, audioContext.currentTime + 0.5);
            setTimeout(() => {
                if (oscillator) oscillator.stop();
            }, 500);
        }
    }
    
    function createRift(x, y) {
        rifts.push({
            x: x,
            y: y,
            width: Math.random() * 100 + 50,
            height: Math.random() * 20 + 10,
            pulse: Math.random() * Math.PI * 2
        });
    }
    
    function drawRifts() {
        rifts.forEach(rift => {
            rift.pulse += 0.1;
            const alpha = 0.3 + Math.sin(rift.pulse) * 0.2;
            
            ctx.save();
            ctx.globalAlpha = alpha;
            ctx.fillStyle = '#ff0066';
            ctx.fillRect(rift.x, rift.y, rift.width, rift.height);
            
            ctx.fillStyle = '#0066ff';
            ctx.fillRect(rift.x + 2, rift.y + 2, rift.width - 4, rift.height - 4);
            ctx.restore();
        });
    }
    
    function drawGlitchedGreg() {
        if (gregGone) return;
        
        ctx.save();
        
        // Glitch effects
        if (glitchIntensity > 0) {
            ctx.translate(
                (Math.random() - 0.5) * glitchIntensity,
                (Math.random() - 0.5) * glitchIntensity
            );
            
            // Color separation effect
            ctx.globalCompositeOperation = 'screen';
            ctx.fillStyle = 'rgba(255, 0, 0, 0.3)';
            ctx.fillRect(posX - 2, posY, FRAME_WIDTH, FRAME_HEIGHT);
            
            ctx.fillStyle = 'rgba(0, 255, 0, 0.3)';
            ctx.fillRect(posX + 1, posY, FRAME_WIDTH, FRAME_HEIGHT);
            
            ctx.fillStyle = 'rgba(0, 0, 255, 0.3)';
            ctx.fillRect(posX, posY + 1, FRAME_WIDTH, FRAME_HEIGHT);
            
            ctx.globalCompositeOperation = 'source-over';
        }
        
        // Draw Greg
        if (glitchIntensity > 5) {
            // Heavy distortion
            ctx.scale(1 + Math.random() * 0.2, 1 + Math.random() * 0.2);
        }
        
        ctx.drawImage(
            gregSprite,
            0, POSITION_ROW * FRAME_HEIGHT,
            FRAME_WIDTH, FRAME_HEIGHT,
            posX, posY,
            FRAME_WIDTH, FRAME_HEIGHT
        );
        
        ctx.restore();
    }
    
    function drawWrench() {
        if (!wrenchDropped) return;
        
        // Simple wrench representation
        ctx.fillStyle = '#888';
        ctx.fillRect(posX + 30, posY + 55, 8, 3);
        ctx.fillRect(posX + 32, posY + 52, 4, 9);
    }
    
    function animate() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        
        // Background cracks
        if (glitchIntensity > 2) {
            ctx.strokeStyle = '#ff0066';
            ctx.lineWidth = 2;
            ctx.beginPath();
            for (let i = 0; i < 5; i++) {
                ctx.moveTo(Math.random() * canvas.width, Math.random() * canvas.height);
                ctx.lineTo(Math.random() * canvas.width, Math.random() * canvas.height);
            }
            ctx.stroke();
        }
        
        drawRifts();
        drawGlitchedGreg();
        drawWrench();
        
        if (!gregGone) {
            requestAnimationFrame(animate);
        }
    }
    
    gregSprite.onload = () => {
        animate();
        
        // Start the sequence
        setTimeout(() => {
            canvas.style.animation = 'canvas-shake 0.1s infinite';
            glitchIntensity = 1;
            startHum();
        }, 1000);
        
        setTimeout(() => {
            glitchIntensity = 3;
            createRift(100, 200);
            createRift(600, 150);
        }, 2000);
        
        setTimeout(() => {
            document.querySelector('.glitch-text').classList.remove('hidden');
        }, 2500);
        
        setTimeout(() => {
            document.querySelectorAll('.character-dialogue.hidden').forEach((el, index) => {
                setTimeout(() => el.classList.remove('hidden'), index * 800);
            });
        }, 3000);
        
        setTimeout(() => {
            glitchIntensity = 8;
            createRift(posX, posY + 60); // Rift under Greg
        }, 6000);
        
        setTimeout(() => {
            wrenchDropped = true;
            posY += 5; // Greg starts falling
        }, 6500);
        
        setTimeout(() => {
            gregGone = true;
            stopHum();
            canvas.style.animation = '';
            setTimeout(() => {
                document.getElementById('next-choices').classList.remove('hidden');
            }, 2000);
        }, 7000);
    };
});
</script>
{% endblock %}
