<?php

namespace App\Controller;

use App\Entity\Content;
use App\Entity\Category;
use App\Form\ContentType;
use App\Repository\CategoryRepository;
use App\Service\SiteContext;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

final class ProfilerController extends AbstractController
{

  public function __construct(
        private SiteContext         $siteContext,
        private CategoryRepository  $categoryRepo,
        private EntityManagerInterface $em
    ) {}

  #[Route("/profiler", name: "profiler_dashboard")]
  public function index(): Response
  {
        /** @var \Doctrine\Common\Collections\Collection|Site[] $sites */
        $sites = $this->getUser()->getSite();
        $session = $this->requestStack->getCurrentRequest()->getSession();

        if (count($sites) === 0) {
            $routeBuilder = $this->container->get(AdminUrlGenerator::class);
            $url = $routeBuilder->setController(SiteCrudController::class)->generateUrl();
            return $this->redirect($url);
        }

        if (count($sites) === 1 && !$session->has('current_site_id')) {
            $session->set('current_site_id', $sites[0]->getId());
        }

        if (count($sites) > 1 && !$session->has('current_site_id')) {
            return $this->redirectToRoute('select_site');
        }

        // At this point we have current_site_id set                                                                                                                                                        
	$categories = $this->categoryRepo->findAll();
        return $this->render('instance.html.twig', [
          'categories' => $categories,
          'site_name' =>  $session->get('current_site_id')
                               ]
        );
    }
  
    public function configureMenuItems(): iterable
    {
        yield MenuItem::linkToDashboard('Dashboard', 'fa fa-home');
        yield MenuItem::linkToCrud('Sites', 'fa fa-globe', Site::class);
        yield MenuItem::linkToCrud('Categories', 'fa fa-sliders', Category::class);
        yield MenuItem::linkToCrud('Content', 'fa fa-database', Content::class);
        yield MenuItem::linkToCrud('Pages', 'fa fa-file', Page::class);
        yield MenuItem::linkToCrud('Users', 'fa fa-user', User::class);
    }~

  #[Route('/profiler/content/new', name: 'content_new')]
  public function new(Request $request): Response
  {
    $catId = $request->query->getInt('category');
    if (!$catId) {
      throw $this->createNotFoundException('No category specified');
    }
    
    /** @var Category|null $category */
    $category = $this->categoryRepo->find($catId);
    if (!$category) {
      throw $this->createNotFoundException("Category #{$catId} not found");
    }
    
    $content = new Content();
    $content->setCategory($category);
    
    $form = $this->createForm(ContentType::class, $content, [
      // extra options
    ]);
    $form->handleRequest($request);
    
    if ($form->isSubmitted() && $form->isValid()) {
      $this->em->persist($content);
      $this->em->flush();
      
      $this->addFlash('success', 'Content created!');
      return $this->redirectToRoute('profiler_dashboard');
    }
    
    return $this->render('content_new.html.twig', [
      'form'     => $form->createView(),
      'category' => $category,
    ]);
  }
}
